=============================================================================
INSTRU√á√ïES COMPLETAS PARA SETUP DA PLATAFORMA DE AGENDAMENTO
=============================================================================

Este arquivo cont√©m todas as instru√ß√µes necess√°rias para configurar e executar
o projeto da plataforma de agendamento SaaS com zero custo fixo.

=============================================================================
1. PR√â-REQUISITOS
=============================================================================

‚úÖ Node.js 18+ instalado
‚úÖ pnpm instalado (npm install -g pnpm)
‚úÖ Git instalado
‚úÖ Conta no GitHub
‚úÖ Conta no Supabase (gratuita)
‚úÖ Conta no Vercel (gratuita)
‚úÖ Conta no Cloudflare (gratuita)
‚úÖ Conta no Upstash (gratuita)
‚úÖ Conta no Resend (gratuita)

=============================================================================
2. CONFIGURA√á√ÉO INICIAL
=============================================================================

1. Clone o reposit√≥rio:
   git clone <URL_DO_SEU_REPO>
   cd plataforma-agenda

2. Instale as depend√™ncias:
   pnpm install

3. Copie o arquivo de vari√°veis de ambiente:
   cp env.example .env.local

=============================================================================
3. CONFIGURA√á√ÉO DO SUPABASE
=============================================================================

1. Acesse https://supabase.com e crie uma conta gratuita

2. Crie um novo projeto:
   - Nome: "plataforma-agenda"
   - Database Password: (anote esta senha)
   - Region: S√£o Paulo (se dispon√≠vel)

3. Ap√≥s criar o projeto, v√° em Settings > API e copie:
   - Project URL
   - anon public key
   - service_role key

4. Execute as migra√ß√µes SQL no Supabase:
   - V√° em SQL Editor
   - Execute o conte√∫do do arquivo database/migrations/001_initial_schema.sql
   - Execute o conte√∫do do arquivo database/migrations/002_rls_policies.sql
   - Execute o conte√∫do do arquivo database/seeds/001_demo_data.sql

5. Configure as vari√°veis de ambiente no .env.local:
   DATABASE_URL=postgresql://postgres:[SUA_SENHA]@db.[PROJECT_REF].supabase.co:5432/postgres
   SUPABASE_URL=https://[PROJECT_REF].supabase.co
   SUPABASE_ANON_KEY=[ANON_KEY]
   SUPABASE_SERVICE_ROLE_KEY=[SERVICE_ROLE_KEY]

=============================================================================
4. CONFIGURA√á√ÉO DO UPSTASH REDIS
=============================================================================

1. Acesse https://upstash.com e crie uma conta gratuita

2. Crie um novo database:
   - Name: "plataforma-agenda-cache"
   - Region: S√£o Paulo (se dispon√≠vel)
   - TLS: Enabled

3. Ap√≥s criar, copie:
   - UPSTASH_REDIS_REST_URL
   - UPSTASH_REDIS_REST_TOKEN

4. Configure no .env.local:
   UPSTASH_REDIS_REST_URL=[URL_DO_REDIS]
   UPSTASH_REDIS_REST_TOKEN=[TOKEN_DO_REDIS]

=============================================================================
5. CONFIGURA√á√ÉO DO RESEND (E-MAIL)
=============================================================================

1. Acesse https://resend.com e crie uma conta gratuita

2. Verifique seu dom√≠nio ou use o dom√≠nio de teste

3. Copie a API Key

4. Configure no .env.local:
   RESEND_API_KEY=[SUA_API_KEY]
   RESEND_FROM_EMAIL=noreply@seudominio.com

=============================================================================
6. CONFIGURA√á√ÉO DO CLOUDFLARE WORKERS
=============================================================================

1. Acesse https://cloudflare.com e crie uma conta gratuita

2. Instale o Wrangler CLI:
   npm install -g wrangler

3. Fa√ßa login no Wrangler:
   wrangler login

4. Configure o wrangler.toml em apps/worker/:
   [env.production]
   name = "plataforma-agenda-api"
   account_id = "[SEU_ACCOUNT_ID]"
   workers_dev = true
   compatibility_date = "2024-01-01"

   [env.production.vars]
   SUPABASE_URL = "[SUA_SUPABASE_URL]"
   SUPABASE_ANON_KEY = "[SUA_SUPABASE_ANON_KEY]"
   SUPABASE_SERVICE_ROLE_KEY = "[SUA_SUPABASE_SERVICE_ROLE_KEY]"
   UPSTASH_REDIS_REST_URL = "[SUA_REDIS_URL]"
   UPSTASH_REDIS_REST_TOKEN = "[SUA_REDIS_TOKEN]"
   RESEND_API_KEY = "[SUA_RESEND_API_KEY]"
   JWT_SECRET = "[SEU_JWT_SECRET]"

5. Configure as vari√°veis de ambiente no .env.local:
   CLOUDFLARE_ACCOUNT_ID=[SEU_ACCOUNT_ID]
   CLOUDFLARE_API_TOKEN=[SEU_API_TOKEN]

=============================================================================
7. CONFIGURA√á√ÉO DO VERCEL
=============================================================================

1. Acesse https://vercel.com e crie uma conta gratuita

2. Conecte seu reposit√≥rio GitHub ao Vercel

3. Configure as vari√°veis de ambiente no Vercel:
   - SUPABASE_URL
   - SUPABASE_ANON_KEY
   - UPSTASH_REDIS_REST_URL
   - UPSTASH_REDIS_REST_TOKEN
   - RESEND_API_KEY
   - JWT_SECRET
   - NEXTAUTH_URL (URL do seu dom√≠nio)
   - NEXTAUTH_SECRET (chave secreta para NextAuth)

4. Configure o build command:
   pnpm build:web

5. Configure o output directory:
   apps/web/.next

=============================================================================
8. CONFIGURA√á√ÉO DAS VARI√ÅVEIS DE AMBIENTE COMPLETAS
=============================================================================

Copie este conte√∫do para o arquivo .env.local:

# Supabase
DATABASE_URL=postgresql://postgres:[SUA_SENHA]@db.[PROJECT_REF].supabase.co:5432/postgres
SUPABASE_URL=https://[PROJECT_REF].supabase.co
SUPABASE_ANON_KEY=[ANON_KEY]
SUPABASE_SERVICE_ROLE_KEY=[SERVICE_ROLE_KEY]

# Redis (Upstash)
UPSTASH_REDIS_REST_URL=https://[REDIS_URL].upstash.io
UPSTASH_REDIS_REST_TOKEN=[REDIS_TOKEN]

# E-mail (Resend)
RESEND_API_KEY=[RESEND_API_KEY]
RESEND_FROM_EMAIL=noreply@seudominio.com

# JWT e Auth
JWT_SECRET=[GERAR_CHAVE_SECRETA_32_CARACTERES]
NEXTAUTH_URL=http://localhost:3000
NEXTAUTH_SECRET=[GERAR_CHAVE_SECRETA_32_CARACTERES]

# App
APP_BASE_URL=http://localhost:3000
API_BASE_URL=http://localhost:8787
TIMEZONE=America/Sao_Paulo
DEFAULT_LOCALE=pt-BR
NODE_ENV=development

# Cloudflare
CLOUDFLARE_ACCOUNT_ID=[SEU_ACCOUNT_ID]
CLOUDFLARE_API_TOKEN=[SEU_API_TOKEN]

# Feature Flags
ENABLE_PAYMENTS=false
ENABLE_ANALYTICS=false
ENABLE_NOTIFICATIONS=true

# Limites
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW_MS=900000
CACHE_TTL_SECONDS=120
MAX_FILE_SIZE_MB=5

# Logs
LOG_LEVEL=info

=============================================================================
9. EXECUTANDO O PROJETO LOCALMENTE
=============================================================================

1. Build do pacote core:
   pnpm build:core

2. Em um terminal, execute o frontend:
   pnpm dev:web

3. Em outro terminal, execute a API:
   pnpm dev:worker

4. Acesse:
   - Frontend: http://localhost:3000
   - API: http://localhost:8787

=============================================================================
10. DEPLOY EM PRODU√á√ÉO
=============================================================================

1. Deploy da API (Cloudflare Workers):
   cd apps/worker
   wrangler deploy --env production

2. Deploy do Frontend (Vercel):
   - Conecte o reposit√≥rio ao Vercel
   - Configure as vari√°veis de ambiente
   - Deploy autom√°tico ser√° feito

3. Configure os dom√≠nios:
   - Frontend: https://seudominio.vercel.app
   - API: https://plataforma-agenda-api.[SEU_SUBDOMINIO].workers.dev

4. Atualize as vari√°veis de ambiente:
   APP_BASE_URL=https://seudominio.vercel.app
   API_BASE_URL=https://plataforma-agenda-api.[SEU_SUBDOMINIO].workers.dev
   NEXTAUTH_URL=https://seudominio.vercel.app

=============================================================================
11. CONFIGURA√á√ÉO DO CRON (LEMBRETES)
=============================================================================

1. No Cloudflare Workers, configure o cron trigger:
   - V√° em Workers & Pages > seu worker > Triggers
   - Adicione um Cron Trigger:
     - Cron expression: "0 */1 * * *" (a cada hora)
     - Route: /cron/reminders

2. Ou use o Wrangler:
   wrangler deploy --env production --schedule "0 */1 * * *"

=============================================================================
12. TESTANDO O SISTEMA
=============================================================================

1. Teste de autentica√ß√£o:
   - Acesse http://localhost:3000
   - Crie uma conta
   - Fa√ßa login

2. Teste de agendamento:
   - Crie uma unidade
   - Adicione profissionais
   - Crie servi√ßos
   - Configure hor√°rios
   - Teste o booking p√∫blico

3. Teste de notifica√ß√µes:
   - Crie um agendamento
   - Verifique se o e-mail foi enviado

4. Teste de relat√≥rios:
   - Acesse a se√ß√£o de relat√≥rios
   - Gere relat√≥rios por per√≠odo

=============================================================================
13. COMANDOS √öTEIS
=============================================================================

# Desenvolvimento
pnpm dev              # Todos os servi√ßos
pnpm dev:web          # Apenas frontend
pnpm dev:worker       # Apenas API

# Build
pnpm build            # Build completo
pnpm build:web        # Build frontend
pnpm build:worker     # Build API
pnpm build:core       # Build pacote core

# Testes
pnpm test             # Todos os testes
pnpm test:unit        # Testes unit√°rios
pnpm test:e2e         # Testes E2E

# Lint e Type Check
pnpm lint             # ESLint
pnpm type-check       # TypeScript

# Banco de dados
pnpm db:migrate       # Executar migra√ß√µes
pnpm db:seed          # Executar seeds
pnpm db:reset         # Reset do banco

# Deploy
wrangler deploy       # Deploy da API
vercel --prod         # Deploy do frontend

=============================================================================
14. ESTRUTURA DE ARQUIVOS IMPORTANTES
=============================================================================

üìÅ apps/
  üìÅ web/                 # Next.js App (Frontend)
  üìÅ worker/              # Cloudflare Workers (API)

üìÅ packages/
  üìÅ core/                # SDK compartilhado
  üìÅ ui/                  # Componentes UI

üìÅ database/
  üìÅ migrations/          # Migra√ß√µes SQL
  üìÅ seeds/               # Dados iniciais

üìÅ docs/                  # Documenta√ß√£o

=============================================================================
15. TROUBLESHOOTING
=============================================================================

‚ùå Erro de conex√£o com Supabase:
   - Verifique as vari√°veis de ambiente
   - Confirme se o projeto est√° ativo
   - Verifique se as migra√ß√µes foram executadas

‚ùå Erro de cache Redis:
   - Verifique as credenciais do Upstash
   - Confirme se o database est√° ativo

‚ùå Erro de e-mail:
   - Verifique a API key do Resend
   - Confirme se o dom√≠nio est√° verificado

‚ùå Erro de build:
   - Execute pnpm install
   - Limpe o cache: pnpm clean
   - Verifique se o Node.js √© 18+

‚ùå Erro de deploy:
   - Verifique as vari√°veis de ambiente
   - Confirme se as contas est√£o ativas
   - Verifique os logs de erro

=============================================================================
16. PR√ìXIMOS PASSOS
=============================================================================

‚úÖ Sistema b√°sico funcionando
üîÑ Implementar pagamentos (Mercado Pago/Stripe)
üîÑ Adicionar mais relat√≥rios
üîÑ Implementar notifica√ß√µes push
üîÑ Adicionar integra√ß√£o com WhatsApp
üîÑ Implementar sistema de fidelidade
üîÑ Adicionar dashboard avan√ßado
üîÑ Implementar backup autom√°tico
üîÑ Adicionar testes automatizados

=============================================================================
17. SUPORTE
=============================================================================

Para d√∫vidas ou problemas:
1. Verifique os logs de erro
2. Consulte a documenta√ß√£o do Supabase
3. Abra uma issue no reposit√≥rio
4. Entre em contato com o suporte

=============================================================================
18. LICEN√áA
=============================================================================

Este projeto √© open source e pode ser usado livremente.
Mantenha os cr√©ditos originais se redistribuir.

=============================================================================

üéâ PARAB√âNS! Seu SaaS de agendamento est√° pronto para uso!

Data de cria√ß√£o: $(date)
Vers√£o: 1.0.0
Desenvolvido com ‚ù§Ô∏è para o mercado brasileiro
